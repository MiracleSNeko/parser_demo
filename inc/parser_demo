#pragma once

#include "./core/basic_parser_conbinators.hpp"
#include "./core/combinator.hpp"
#include "./core/parser.hpp"

#include "./utils/algorithms.hpp"
#include "./utils/containers.hpp"
#include "./utils/iterator.hpp"
#include "./utils/option.hpp"
#include "./utils/type_traits.hpp"

namespace d1
{

using d1::core::basic_parser_combinator::ParseChar;
using d1::core::basic_parser_combinator::ParseNoneOfChars;
using d1::core::basic_parser_combinator::ParseOneOfChars;
using d1::core::basic_parser_combinator::ParseString;
using namespace d1::core::basic_parser_combinator::literals;

using d1::core::combinator::Any;
using d1::core::combinator::Combine;
using d1::core::combinator::DoWhile;
using d1::core::combinator::Exactly;
using d1::core::combinator::Many;
using d1::core::combinator::Try;
using d1::core::combinator::While;
using namespace d1::core::combinator::operators;

using d1::core::parser::Bind;
using d1::core::parser::Except;
using d1::core::parser::ExceptWith;
using d1::core::parser::Map;
using d1::core::parser::Parser;
using d1::core::parser::ParserInput;
using d1::core::parser::ParserOutput;

using d1::utils::algorithm::all;
using d1::utils::algorithm::any;
using d1::utils::algorithm::copy;
using d1::utils::algorithm::copy_if;
using d1::utils::algorithm::copy_n;
using d1::utils::algorithm::count;
using d1::utils::algorithm::count_if;
using d1::utils::algorithm::distance;
using d1::utils::algorithm::equal;
using d1::utils::algorithm::fill;
using d1::utils::algorithm::fill_n;
using d1::utils::algorithm::find;
using d1::utils::algorithm::find_if;
using d1::utils::algorithm::mismatch;
using d1::utils::algorithm::move;
using d1::utils::algorithm::move_if;
using d1::utils::algorithm::move_n;

using d1::utils::containers::StaticString;
using d1::utils::containers::StaticVector;
using namespace d1::utils::containers::operators;

using d1::utils::iterator::back_insert_iterator;

using d1::utils::option::NONE;
using d1::utils::option::None;
using d1::utils::option::Option;
using d1::utils::option::SOME;
using d1::utils::option::Some;
using namespace d1::utils::option::operators;

namespace traits
{
    using namespace d1::utils::template_traits;
    using namespace d1::utils::function_traits;
}  // namespace traits

}  // namespace d1